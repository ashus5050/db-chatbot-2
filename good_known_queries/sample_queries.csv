serial_no,question,sql_query,persona
1,How many customers do we have in each industry segment?,"SELECT industry, COUNT(*) as customer_count FROM dbo.customer_metadata_sample GROUP BY industry ORDER BY customer_count DESC;",General
2,Which products are currently out of stock across all warehouses?,"SELECT DISTINCT p.product_id, p.product_name, p.category FROM dbo.product_metadata_sample p JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id WHERE i.current_stock = 0;",General
3,What is the total value of inventory for products in the highest-value category?,"SELECT p.category, SUM(i.current_stock * p.standard_cost) as total_inventory_value FROM dbo.inventory_metadata_sample i JOIN dbo.product_metadata_sample p ON i.product_id = p.product_id WHERE p.category = (SELECT TOP 1 category FROM dbo.product_metadata_sample WHERE selling_price IS NOT NULL GROUP BY category ORDER BY AVG(selling_price) DESC) GROUP BY p.category;",General
4,Which suppliers have an OTIF performance below their contractual agreement?,"SELECT supplier_id, supplier_name, service_level_agreement_otif, avg_otif_qtr_current, (service_level_agreement_otif - avg_otif_qtr_current) as performance_gap FROM dbo.supplier_metadata_sample WHERE avg_otif_qtr_current < service_level_agreement_otif AND is_active = 1;",General
5,Show me all delayed orders and their delay reasons from the past month.,"SELECT order_id, customer_id, product_id, promised_delivery_date, actual_delivery_date, delay_reason FROM dbo.orders_metadata_sample WHERE is_on_time = 0 AND order_date >= DATEADD(month, -1, GETDATE());",General
6,What are the top 5 products with the highest criticality level that are below minimum stock?,"SELECT TOP 5 p.product_id, p.product_name, p.criticality_level, SUM(i.current_stock) as total_stock, p.minimum_stock_level FROM dbo.product_metadata_sample p JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id WHERE p.criticality_level IS NOT NULL GROUP BY p.product_id, p.product_name, p.criticality_level, p.minimum_stock_level HAVING SUM(i.current_stock) < p.minimum_stock_level ORDER BY p.criticality_level DESC, SUM(i.current_stock) ASC;",General
7,Which regions have been most affected by severe weather events this year?,"SELECT r.region_name, r.country, w.severity, COUNT(*) as event_count FROM dbo.weather_event_metadata_sample w JOIN dbo.region_metadata_sample r ON w.region_id = r.region_id WHERE w.start_date >= '2025-01-01' GROUP BY r.region_name, r.country, w.severity ORDER BY w.severity DESC, event_count DESC;",General
8,What is the average profit margin by product category?,"SELECT category, AVG((selling_price - standard_cost) / selling_price * 100) as avg_profit_margin_pct FROM dbo.product_metadata_sample WHERE selling_price > 0 AND standard_cost > 0 GROUP BY category ORDER BY avg_profit_margin_pct DESC;",General
9,Show me all top-tier customers who haven't placed any orders.,"SELECT c.customer_id, c.customer_name, c.industry, c.customer_tier, c.contact_email FROM dbo.customer_metadata_sample c LEFT JOIN dbo.orders_metadata_sample o ON c.customer_id = o.customer_id WHERE c.customer_tier IS NOT NULL AND o.customer_id IS NULL ORDER BY c.customer_tier;",General
10,Which products have the longest lead times by lifecycle stage?,"SELECT product_id, product_name, category, lead_time_days, lifecycle_stage FROM dbo.product_metadata_sample WHERE lifecycle_stage IS NOT NULL AND lead_time_days IS NOT NULL ORDER BY lifecycle_stage, lead_time_days DESC;",General
11,What is the total quantity ordered versus delivered for each supplier this quarter?,"SELECT supplier_id, SUM(ordered_quantity) as total_ordered, SUM(delivered_quantity) as total_delivered, (SUM(delivered_quantity) * 100.0 / SUM(ordered_quantity)) as fill_rate_pct FROM dbo.orders_metadata_sample WHERE order_date >= DATEADD(quarter, -1, GETDATE()) GROUP BY supplier_id ORDER BY fill_rate_pct DESC;",General
12,Which warehouses have inventory that hasn't been updated in over 30 days?,"SELECT warehouse_id, COUNT(*) as stale_records, MIN(last_updated_date) as oldest_update FROM dbo.inventory_metadata_sample WHERE DATEDIFF(day, CAST(last_updated_date AS DATE), GETDATE()) > 30 GROUP BY warehouse_id ORDER BY stale_records DESC;",General
13,Show me the delivery performance by region for all completed orders.,"SELECT r.region_name, COUNT(*) as total_orders, SUM(CAST(o.is_on_time AS INT)) as on_time_orders, (SUM(CAST(o.is_on_time AS INT)) * 100.0 / COUNT(*)) as on_time_percentage FROM dbo.orders_metadata_sample o JOIN dbo.region_metadata_sample r ON o.shipping_region_id = r.region_id WHERE o.delivery_status = 'Completed' GROUP BY r.region_name ORDER BY on_time_percentage DESC;",General
14,What are the heaviest and most voluminous products by category?,"SELECT category, product_id, product_name, sub_category, weight_kg, volume_m3, (weight_kg * volume_m3) as density_factor FROM dbo.product_metadata_sample WHERE weight_kg IS NOT NULL AND volume_m3 IS NOT NULL ORDER BY category, weight_kg DESC, volume_m3 DESC;",General
15,Which suppliers are at high risk and have contracts expiring within the next 6 months?,"SELECT supplier_id, supplier_name, risk_score, contract_end_date, tier FROM dbo.supplier_metadata_sample WHERE risk_score >= 7 AND CAST(contract_end_date AS DATE) <= DATEADD(month, 6, GETDATE()) AND is_active = 1 ORDER BY risk_score DESC, contract_end_date;",General
16,What is the current stock level versus reorder point for products ordered by premium customers?,"SELECT DISTINCT p.product_id, p.product_name, SUM(i.current_stock) as total_stock, p.minimum_stock_level, CASE WHEN SUM(i.current_stock) <= p.minimum_stock_level THEN 'REORDER NEEDED' ELSE 'SUFFICIENT' END as stock_status FROM dbo.orders_metadata_sample o JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id WHERE c.customer_tier IS NOT NULL GROUP BY p.product_id, p.product_name, p.minimum_stock_level ORDER BY c.customer_tier, total_stock;",General
17,Which regions have poor infrastructure but high economic impact?,"SELECT region_name, country, infrastructure_index, economic_impact_score, (economic_impact_score - infrastructure_index) as impact_gap FROM dbo.region_metadata_sample WHERE infrastructure_index IS NOT NULL AND economic_impact_score IS NOT NULL ORDER BY impact_gap DESC;",General
18,Show me weather events that coincided with order delays in the same region.,"SELECT DISTINCT w.event_type, w.severity, r.region_name, COUNT(o.order_id) as affected_orders FROM dbo.weather_event_metadata_sample w JOIN dbo.region_metadata_sample r ON w.region_id = r.region_id JOIN dbo.orders_metadata_sample o ON r.region_id = o.shipping_region_id WHERE o.is_on_time = 0 AND o.order_date BETWEEN CAST(w.start_date AS DATE) AND CAST(w.end_date AS DATE) GROUP BY w.event_type, w.severity, r.region_name ORDER BY affected_orders DESC;",General
19,What is the average order quantity by product category and customer tier?,"SELECT p.category, c.customer_tier, AVG(o.ordered_quantity) as avg_order_qty, COUNT(*) as order_count FROM dbo.orders_metadata_sample o JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id WHERE p.category IS NOT NULL AND c.customer_tier IS NOT NULL GROUP BY p.category, c.customer_tier ORDER BY p.category, avg_order_qty DESC;",General
20,Which active suppliers have improved their OTIF performance compared to last quarter?,"SELECT supplier_id, supplier_name, avg_otif_qtr_prev as previous_quarter, avg_otif_qtr_current as current_quarter, (avg_otif_qtr_current - avg_otif_qtr_prev) as improvement FROM dbo.supplier_metadata_sample WHERE is_active = 1 AND avg_otif_qtr_current > avg_otif_qtr_prev ORDER BY improvement DESC;",General
21,Show me products that are overstocked but have high criticality levels.,"SELECT p.product_id, p.product_name, p.criticality_level, SUM(i.current_stock) as total_stock, p.minimum_stock_level, (SUM(i.current_stock) - p.minimum_stock_level) as excess_stock FROM dbo.product_metadata_sample p JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id WHERE p.criticality_level IS NOT NULL AND p.minimum_stock_level IS NOT NULL GROUP BY p.product_id, p.product_name, p.criticality_level, p.minimum_stock_level HAVING SUM(i.current_stock) > p.minimum_stock_level ORDER BY p.criticality_level DESC, excess_stock DESC;",General
22,What is the transit time impact by region considering infrastructure and seasonal risks?,"SELECT region_name, avg_transit_time_days, infrastructure_index, seasonal_risk_factor, (avg_transit_time_days * seasonal_risk_factor * (11 - infrastructure_index)) as risk_adjusted_transit_time FROM dbo.region_metadata_sample WHERE avg_transit_time_days IS NOT NULL AND infrastructure_index IS NOT NULL AND seasonal_risk_factor IS NOT NULL ORDER BY risk_adjusted_transit_time DESC;",General
23,Which orders have incomplete deliveries from top-tier suppliers?,"SELECT o.order_id, s.supplier_name, s.tier, o.ordered_quantity, o.delivered_quantity, (o.ordered_quantity - o.delivered_quantity) as shortage FROM dbo.orders_metadata_sample o JOIN dbo.supplier_metadata_sample s ON o.supplier_id = s.supplier_id WHERE o.is_in_full = 0 AND s.tier IS NOT NULL ORDER BY s.tier, shortage DESC;",General
24,Show me the top 10 customers by total order value this year.,"SELECT TOP 10 c.customer_id, c.customer_name, c.industry, c.customer_tier, SUM(o.ordered_quantity * p.selling_price) as total_order_value FROM dbo.orders_metadata_sample o JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id WHERE o.order_date >= '2025-01-01' AND p.selling_price IS NOT NULL GROUP BY c.customer_id, c.customer_name, c.industry, c.customer_tier ORDER BY total_order_value DESC;",General
25,Which products in different lifecycle stages have the best margin potential?,"SELECT lifecycle_stage, product_id, product_name, category, ((selling_price - standard_cost) / standard_cost * 100) as margin_percentage FROM dbo.product_metadata_sample WHERE selling_price > 0 AND standard_cost > 0 AND lifecycle_stage IS NOT NULL ORDER BY lifecycle_stage, margin_percentage DESC;",General
26,Calculate the coefficient of variation for order quantities by product category to identify which categories have the most volatile demand patterns.,"SELECT p.category, COUNT(*) as order_count, AVG(CAST(o.ordered_quantity AS FLOAT)) as avg_quantity, STDEV(CAST(o.ordered_quantity AS FLOAT)) as std_quantity, (STDEV(CAST(o.ordered_quantity AS FLOAT)) / AVG(CAST(o.ordered_quantity AS FLOAT))) * 100 as coefficient_of_variation FROM dbo.orders_metadata_sample o JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id GROUP BY p.category HAVING COUNT(*) >= 5 AND AVG(CAST(o.ordered_quantity AS FLOAT)) > 0 ORDER BY coefficient_of_variation DESC;",Data Scientist
27,Identify products with abnormal inventory patterns by finding those where current stock is more than 2 standard deviations away from the category mean.,"WITH category_stats AS (SELECT p.category, AVG(CAST(i.current_stock AS FLOAT)) as avg_stock, STDEV(CAST(i.current_stock AS FLOAT)) as std_stock FROM dbo.inventory_metadata_sample i JOIN dbo.product_metadata_sample p ON i.product_id = p.product_id GROUP BY p.category HAVING COUNT(*) >= 3), product_zscore AS (SELECT i.product_id, p.product_name, p.category, i.current_stock, cs.avg_stock, cs.std_stock, ABS((i.current_stock - cs.avg_stock) / NULLIF(cs.std_stock, 0)) as z_score FROM dbo.inventory_metadata_sample i JOIN dbo.product_metadata_sample p ON i.product_id = p.product_id JOIN category_stats cs ON p.category = cs.category WHERE cs.std_stock > 0) SELECT * FROM product_zscore WHERE z_score > 2 ORDER BY z_score DESC;",Data Scientist
28,"Perform a multi-dimensional analysis of supplier performance correlation between risk score, OTIF performance, and regional infrastructure quality.","SELECT s.supplier_id, s.supplier_name, s.risk_score, s.avg_otif_qtr_current, r.infrastructure_index, r.region_name, (s.avg_otif_qtr_current * r.infrastructure_index / 100.0) as composite_performance_score, CASE WHEN s.risk_score <= 3 AND s.avg_otif_qtr_current >= 95 AND r.infrastructure_index >= 8 THEN 'Excellent' WHEN s.risk_score <= 5 AND s.avg_otif_qtr_current >= 85 AND r.infrastructure_index >= 6 THEN 'Good' WHEN s.risk_score <= 7 AND s.avg_otif_qtr_current >= 75 AND r.infrastructure_index >= 4 THEN 'Average' ELSE 'Poor' END as performance_cluster FROM dbo.supplier_metadata_sample s JOIN dbo.region_metadata_sample r ON s.primary_region_id = r.region_id WHERE s.is_active = 1 ORDER BY composite_performance_score DESC;",Data Scientist
29,Calculate the Pareto distribution (80/20 rule) for customers by analyzing what percentage of customers generate 80% of total order value.,"WITH customer_values AS (SELECT c.customer_id, c.customer_name, SUM(o.ordered_quantity * p.selling_price) as total_value FROM dbo.orders_metadata_sample o JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id WHERE p.selling_price IS NOT NULL GROUP BY c.customer_id, c.customer_name), ranked_customers AS (SELECT *, ROW_NUMBER() OVER (ORDER BY total_value DESC) as rank_num, SUM(total_value) OVER (ORDER BY total_value DESC ROWS UNBOUNDED PRECEDING) as cumulative_value, SUM(total_value) OVER () as total_business_value FROM customer_values), pareto_analysis AS (SELECT *, (cumulative_value * 100.0 / total_business_value) as cumulative_percentage, (rank_num * 100.0 / COUNT(*) OVER()) as customer_percentage FROM ranked_customers) SELECT * FROM pareto_analysis WHERE cumulative_percentage <= 80 ORDER BY rank_num;",Data Scientist
30,Analyze seasonal patterns in order volumes using window functions to calculate rolling 3-month averages and identify trends.,"WITH monthly_orders AS (SELECT YEAR(order_date) as order_year, MONTH(order_date) as order_month, COUNT(*) as order_count, SUM(ordered_quantity) as total_quantity FROM dbo.orders_metadata_sample WHERE order_date IS NOT NULL GROUP BY YEAR(order_date), MONTH(order_date)), rolling_analysis AS (SELECT order_year, order_month, order_count, total_quantity, AVG(CAST(order_count AS FLOAT)) OVER (ORDER BY order_year, order_month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as rolling_3month_avg_orders, AVG(CAST(total_quantity AS FLOAT)) OVER (ORDER BY order_year, order_month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as rolling_3month_avg_quantity, LAG(order_count, 1) OVER (ORDER BY order_year, order_month) as prev_month_orders FROM monthly_orders) SELECT *, ((order_count - prev_month_orders) * 100.0 / NULLIF(prev_month_orders, 0)) as month_over_month_growth FROM rolling_analysis ORDER BY order_year, order_month;",Data Scientist
31,Identify potential supply chain disruption patterns by correlating weather events with delivery delays using statistical significance testing.,"WITH weather_impact AS (SELECT w.region_id, w.event_type, w.severity, COUNT(o.order_id) as orders_during_event, SUM(CASE WHEN o.is_on_time = 0 THEN 1 ELSE 0 END) as delayed_orders, AVG(CASE WHEN o.is_on_time = 0 THEN 1.0 ELSE 0.0 END) as delay_rate_during_event FROM dbo.weather_event_metadata_sample w JOIN dbo.orders_metadata_sample o ON w.region_id = o.shipping_region_id WHERE o.order_date BETWEEN CAST(w.start_date AS DATE) AND CAST(w.end_date AS DATE) GROUP BY w.region_id, w.event_type, w.severity), baseline_performance AS (SELECT shipping_region_id, AVG(CASE WHEN is_on_time = 0 THEN 1.0 ELSE 0.0 END) as baseline_delay_rate FROM dbo.orders_metadata_sample GROUP BY shipping_region_id) SELECT wi.*, bp.baseline_delay_rate, (wi.delay_rate_during_event - bp.baseline_delay_rate) as delay_rate_impact, CASE WHEN wi.delay_rate_during_event > bp.baseline_delay_rate * 1.5 THEN 'Significant Impact' WHEN wi.delay_rate_during_event > bp.baseline_delay_rate * 1.2 THEN 'Moderate Impact' ELSE 'No Significant Impact' END as impact_classification FROM weather_impact wi JOIN baseline_performance bp ON wi.region_id = bp.shipping_region_id WHERE wi.orders_during_event >= 5 ORDER BY delay_rate_impact DESC;",Data Scientist
32,"Calculate inventory turnover ratios and ABC classification for products using advanced segmentation based on volume, value, and criticality.","WITH product_metrics AS (SELECT p.product_id, p.product_name, p.category, p.criticality_level, SUM(o.ordered_quantity) as annual_demand, AVG(i.current_stock) as avg_inventory, p.standard_cost, p.selling_price, SUM(o.ordered_quantity * p.selling_price) as annual_revenue FROM dbo.product_metadata_sample p LEFT JOIN dbo.orders_metadata_sample o ON p.product_id = o.product_id LEFT JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.product_id, p.product_name, p.category, p.criticality_level, p.standard_cost, p.selling_price), abc_classification AS (SELECT *, CASE WHEN avg_inventory > 0 THEN annual_demand / avg_inventory ELSE 0 END as turnover_ratio, NTILE(3) OVER (ORDER BY annual_revenue DESC) as revenue_tier, NTILE(3) OVER (ORDER BY annual_demand DESC) as volume_tier, CASE WHEN criticality_level IS NOT NULL THEN ROW_NUMBER() OVER (PARTITION BY criticality_level ORDER BY criticality_level DESC) ELSE 1 END as criticality_score FROM product_metrics WHERE annual_demand IS NOT NULL) SELECT *, (revenue_tier + volume_tier + CASE WHEN criticality_score <= 10 THEN 3 WHEN criticality_score <= 20 THEN 2 ELSE 1 END) as composite_score, CASE WHEN (revenue_tier + volume_tier + CASE WHEN criticality_score <= 10 THEN 3 WHEN criticality_score <= 20 THEN 2 ELSE 1 END) >= 8 THEN 'A' WHEN (revenue_tier + volume_tier + CASE WHEN criticality_score <= 10 THEN 3 WHEN criticality_score <= 20 THEN 2 ELSE 1 END) >= 6 THEN 'B' ELSE 'C' END as abc_class FROM abc_classification ORDER BY composite_score DESC, turnover_ratio DESC;",Data Scientist
33,"Calculate the Perfect Order Rate (on-time, in-full delivery) by supplier and identify which suppliers are failing to meet operational excellence standards.","SELECT s.supplier_id, s.supplier_name, s.tier, COUNT(*) as total_orders, SUM(CASE WHEN o.is_on_time = 1 AND o.is_in_full = 1 THEN 1 ELSE 0 END) as perfect_orders, (SUM(CASE WHEN o.is_on_time = 1 AND o.is_in_full = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as perfect_order_rate, s.service_level_agreement_otif, CASE WHEN (SUM(CASE WHEN o.is_on_time = 1 AND o.is_in_full = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) < s.service_level_agreement_otif THEN 'UNDERPERFORMING' WHEN (SUM(CASE WHEN o.is_on_time = 1 AND o.is_in_full = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) >= s.service_level_agreement_otif * 1.05 THEN 'EXCEEDING' ELSE 'MEETING' END as sla_status FROM dbo.orders_metadata_sample o JOIN dbo.supplier_metadata_sample s ON o.supplier_id = s.supplier_id WHERE s.is_active = 1 GROUP BY s.supplier_id, s.supplier_name, s.tier, s.service_level_agreement_otif HAVING COUNT(*) >= 10 ORDER BY perfect_order_rate ASC;",Supply Chain Specialist
34,Identify critical inventory exceptions: products with highest criticality levels that are simultaneously below reorder point and have recent order commitments.,"SELECT p.product_id, p.product_name, p.category, p.criticality_level, SUM(i.current_stock) as total_current_stock, p.minimum_stock_level, SUM(CASE WHEN o.delivery_status IN ('Pending', 'In Transit') THEN o.ordered_quantity ELSE 0 END) as committed_quantity, COUNT(CASE WHEN o.delivery_status IN ('Pending', 'In Transit') THEN o.order_id END) as active_orders, p.lead_time_days, CASE WHEN SUM(i.current_stock) + SUM(CASE WHEN o.delivery_status IN ('Pending', 'In Transit') THEN o.ordered_quantity ELSE 0 END) < p.minimum_stock_level THEN 'CRITICAL SHORTAGE' WHEN SUM(i.current_stock) < p.minimum_stock_level THEN 'REORDER REQUIRED' ELSE 'SUFFICIENT' END as stock_status FROM dbo.product_metadata_sample p JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id LEFT JOIN dbo.orders_metadata_sample o ON p.product_id = o.product_id WHERE p.criticality_level IS NOT NULL GROUP BY p.product_id, p.product_name, p.category, p.criticality_level, p.minimum_stock_level, p.lead_time_days HAVING SUM(i.current_stock) <= p.minimum_stock_level ORDER BY p.criticality_level DESC, stock_status, total_current_stock ASC;",Supply Chain Specialist
35,Calculate supplier diversification risk by identifying products that are overly dependent on single suppliers and suggest backup supplier alternatives.,"WITH supplier_dependency AS (SELECT p.product_id, p.product_name, p.category, p.criticality_level, COUNT(DISTINCT o.supplier_id) as supplier_count, SUM(o.ordered_quantity) as total_demand FROM dbo.product_metadata_sample p JOIN dbo.orders_metadata_sample o ON p.product_id = o.product_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.product_id, p.product_name, p.category, p.criticality_level), max_supplier_share AS (SELECT product_id, MAX(supplier_quantity * 100.0 / total_quantity) as max_supplier_share_pct FROM (SELECT product_id, supplier_id, SUM(ordered_quantity) as supplier_quantity, SUM(SUM(ordered_quantity)) OVER (PARTITION BY product_id) as total_quantity FROM dbo.orders_metadata_sample WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY product_id, supplier_id) supplier_shares GROUP BY product_id) SELECT sd.*, ms.max_supplier_share_pct, CASE WHEN ms.max_supplier_share_pct > 80 AND sd.criticality_level IS NOT NULL THEN 'HIGH RISK' WHEN ms.max_supplier_share_pct > 70 THEN 'MEDIUM RISK' ELSE 'LOW RISK' END as diversification_risk FROM supplier_dependency sd JOIN max_supplier_share ms ON sd.product_id = ms.product_id ORDER BY ms.max_supplier_share_pct DESC, sd.criticality_level DESC;",Supply Chain Specialist
36,Analyze order fulfillment bottlenecks by calculating average delivery lead times versus promised delivery times across different product categories and regions.,"SELECT p.category, r.region_name, COUNT(*) as total_orders, AVG(DATEDIFF(day, o.order_date, o.promised_delivery_date)) as avg_promised_lead_time, AVG(DATEDIFF(day, o.order_date, o.actual_delivery_date)) as avg_actual_lead_time, AVG(DATEDIFF(day, o.promised_delivery_date, o.actual_delivery_date)) as avg_delay_days, SUM(CASE WHEN o.is_on_time = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as on_time_percentage, CASE WHEN AVG(DATEDIFF(day, o.promised_delivery_date, o.actual_delivery_date)) > 3 THEN 'MAJOR BOTTLENECK' WHEN AVG(DATEDIFF(day, o.promised_delivery_date, o.actual_delivery_date)) > 1 THEN 'MINOR BOTTLENECK' ELSE 'PERFORMING WELL' END as bottleneck_status FROM dbo.orders_metadata_sample o JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id JOIN dbo.region_metadata_sample r ON o.shipping_region_id = r.region_id WHERE o.actual_delivery_date IS NOT NULL GROUP BY p.category, r.region_name HAVING COUNT(*) >= 5 ORDER BY avg_delay_days DESC;",Supply Chain Specialist
37,Identify products with poor inventory velocity by calculating days of supply and comparing against industry benchmarks by category.,"WITH product_velocity AS (SELECT p.product_id, p.product_name, p.category, SUM(i.current_stock) as total_stock, AVG(daily_demand.avg_daily_demand) as avg_daily_demand, CASE WHEN AVG(daily_demand.avg_daily_demand) > 0 THEN SUM(i.current_stock) / AVG(daily_demand.avg_daily_demand) ELSE NULL END as days_of_supply FROM dbo.product_metadata_sample p JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id LEFT JOIN (SELECT product_id, SUM(ordered_quantity) / 365.0 as avg_daily_demand FROM dbo.orders_metadata_sample WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY product_id) daily_demand ON p.product_id = daily_demand.product_id GROUP BY p.product_id, p.product_name, p.category), category_benchmarks AS (SELECT category, AVG(days_of_supply) as category_avg_dos, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY days_of_supply) OVER (PARTITION BY category) as category_75th_percentile FROM product_velocity WHERE days_of_supply IS NOT NULL GROUP BY category) SELECT pv.*, cb.category_avg_dos, cb.category_75th_percentile, CASE WHEN pv.days_of_supply > cb.category_75th_percentile * 1.5 THEN 'SLOW MOVING' WHEN pv.days_of_supply > cb.category_avg_dos * 1.2 THEN 'BELOW AVERAGE' ELSE 'NORMAL' END as velocity_status FROM product_velocity pv JOIN category_benchmarks cb ON pv.category = cb.category WHERE pv.days_of_supply IS NOT NULL ORDER BY pv.days_of_supply DESC;",Supply Chain Specialist
38,"Calculate supplier performance scorecards combining OTIF, risk factors, and regional logistics efficiency to rank suppliers for contract renewals.","SELECT s.supplier_id, s.supplier_name, s.tier, s.avg_otif_qtr_current, s.risk_score, r.infrastructure_index, r.avg_transit_time_days, r.seasonal_risk_factor, ((s.avg_otif_qtr_current * 0.4) + ((11 - s.risk_score) * 10 * 0.25) + (r.infrastructure_index * 10 * 0.2) + ((10 - LEAST(r.avg_transit_time_days, 10)) * 10 * 0.1) + ((2 - LEAST(r.seasonal_risk_factor, 2)) * 50 * 0.05)) as composite_performance_score, DATEDIFF(day, GETDATE(), CAST(s.contract_end_date AS DATE)) as days_to_contract_expiry, CASE WHEN DATEDIFF(day, GETDATE(), CAST(s.contract_end_date AS DATE)) <= 180 THEN 'RENEWAL REQUIRED' WHEN DATEDIFF(day, GETDATE(), CAST(s.contract_end_date AS DATE)) <= 365 THEN 'RENEWAL PLANNING' ELSE 'MONITOR' END as contract_status FROM dbo.supplier_metadata_sample s JOIN dbo.region_metadata_sample r ON s.primary_region_id = r.region_id WHERE s.is_active = 1 ORDER BY composite_performance_score DESC;",Supply Chain Specialist
39,Identify exception orders that require immediate attention: high-value orders that are delayed with critical products going to premium customers.,"SELECT o.order_id, c.customer_name, c.customer_tier, p.product_name, p.criticality_level, o.ordered_quantity * p.selling_price as order_value, o.order_date, o.promised_delivery_date, o.actual_delivery_date, DATEDIFF(day, o.promised_delivery_date, COALESCE(o.actual_delivery_date, GETDATE())) as delay_days, o.delay_reason, s.supplier_name, s.tier as supplier_tier, r.region_name, CASE WHEN o.actual_delivery_date IS NULL AND DATEDIFF(day, o.promised_delivery_date, GETDATE()) > 0 THEN 'OVERDUE' WHEN o.actual_delivery_date IS NOT NULL AND o.is_on_time = 0 THEN 'DELIVERED LATE' ELSE 'ON TRACK' END as urgency_status FROM dbo.orders_metadata_sample o JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id JOIN dbo.supplier_metadata_sample s ON o.supplier_id = s.supplier_id JOIN dbo.region_metadata_sample r ON o.shipping_region_id = r.region_id WHERE c.customer_tier IS NOT NULL AND p.criticality_level IS NOT NULL AND (o.ordered_quantity * p.selling_price) > 10000 AND ((o.actual_delivery_date IS NULL AND DATEDIFF(day, o.promised_delivery_date, GETDATE()) > 0) OR (o.actual_delivery_date IS NOT NULL AND o.is_on_time = 0)) ORDER BY order_value DESC, delay_days DESC;",Supply Chain Specialist
40,"Calculate regional logistics efficiency metrics including infrastructure utilization, weather impact resistance, and delivery performance to optimize distribution strategies.","WITH regional_metrics AS (SELECT r.region_id, r.region_name, r.infrastructure_index, r.economic_impact_score, r.seasonal_risk_factor, COUNT(o.order_id) as total_orders, AVG(DATEDIFF(day, o.order_date, o.actual_delivery_date)) as avg_delivery_days, SUM(CASE WHEN o.is_on_time = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(o.order_id) as on_time_rate, COUNT(DISTINCT o.customer_id) as unique_customers, SUM(o.ordered_quantity * p.selling_price) as total_revenue FROM dbo.region_metadata_sample r LEFT JOIN dbo.orders_metadata_sample o ON r.region_id = o.shipping_region_id LEFT JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id WHERE o.actual_delivery_date IS NOT NULL GROUP BY r.region_id, r.region_name, r.infrastructure_index, r.economic_impact_score, r.seasonal_risk_factor), weather_impact AS (SELECT region_id, COUNT(*) as weather_events_count, AVG(CASE WHEN severity IS NOT NULL THEN 1 ELSE 0 END) as severity_rate FROM dbo.weather_event_metadata_sample GROUP BY region_id) SELECT rm.*, COALESCE(wi.weather_events_count, 0) as weather_events, COALESCE(wi.severity_rate, 0) as weather_risk_factor, ((rm.on_time_rate * 0.3) + (rm.infrastructure_index * 10 * 0.25) + (rm.economic_impact_score * 10 * 0.2) + ((1 - COALESCE(wi.severity_rate, 0)) * 100 * 0.15) + ((20 - LEAST(rm.avg_delivery_days, 20)) * 5 * 0.1)) as logistics_efficiency_score, CASE WHEN rm.infrastructure_index >= 8 AND rm.on_time_rate >= 90 THEN 'PREMIUM HUB' WHEN rm.infrastructure_index >= 6 AND rm.on_time_rate >= 80 THEN 'PRIMARY HUB' WHEN rm.infrastructure_index >= 4 AND rm.on_time_rate >= 70 THEN 'SECONDARY HUB' ELSE 'SUPPORT HUB' END as hub_classification FROM regional_metrics rm LEFT JOIN weather_impact wi ON rm.region_id = wi.region_id WHERE rm.total_orders > 0 ORDER BY logistics_efficiency_score DESC;",Supply Chain Specialist
41,"Extract a comprehensive dataset for predicting delivery delays including product characteristics, supplier metrics, regional factors, and weather patterns.","SELECT o.order_id, o.ordered_quantity, DATEDIFF(day, o.order_date, o.promised_delivery_date) as promised_lead_time, CASE WHEN o.actual_delivery_date IS NOT NULL THEN DATEDIFF(day, o.order_date, o.actual_delivery_date) ELSE NULL END as actual_lead_time, CASE WHEN o.is_on_time = 0 THEN 1 ELSE 0 END as is_delayed, p.category, p.weight_kg, p.volume_m3, p.criticality_level, p.lead_time_days as standard_lead_time, s.tier as supplier_tier, s.risk_score, s.avg_otif_qtr_current, r.infrastructure_index, r.avg_transit_time_days, r.seasonal_risk_factor, r.economic_impact_score, c.customer_tier, c.industry, CASE WHEN w.event_id IS NOT NULL THEN 1 ELSE 0 END as weather_event_during_order, w.severity as weather_severity, MONTH(o.order_date) as order_month, DATEPART(quarter, o.order_date) as order_quarter, DATEPART(weekday, o.order_date) as order_day_of_week FROM dbo.orders_metadata_sample o JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id JOIN dbo.supplier_metadata_sample s ON o.supplier_id = s.supplier_id JOIN dbo.region_metadata_sample r ON o.shipping_region_id = r.region_id JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id LEFT JOIN dbo.weather_event_metadata_sample w ON r.region_id = w.region_id AND o.order_date BETWEEN CAST(w.start_date AS DATE) AND CAST(w.end_date AS DATE) WHERE o.order_date IS NOT NULL ORDER BY o.order_date DESC;",AI Researcher
42,Create a simulation dataset showing the impact of a hypothetical 15% price increase on high-value products versus current order patterns and customer segments.,"SELECT c.customer_tier, c.industry, p.product_name, p.category, p.sub_category, COUNT(*) as historical_order_count, SUM(o.ordered_quantity) as historical_total_quantity, AVG(o.ordered_quantity) as avg_order_quantity, p.selling_price as current_price, p.selling_price * 1.15 as simulated_new_price, SUM(o.ordered_quantity * p.selling_price) as current_total_value, SUM(o.ordered_quantity * p.selling_price * 1.15) as simulated_total_value, (SUM(o.ordered_quantity * p.selling_price * 1.15) - SUM(o.ordered_quantity * p.selling_price)) as value_increase, CASE WHEN c.customer_tier IS NOT NULL AND c.customer_tier IN (SELECT TOP 1 customer_tier FROM dbo.customer_metadata_sample GROUP BY customer_tier ORDER BY COUNT(*) DESC) THEN 0.85 ELSE 0.70 END as demand_retention_factor, SUM(o.ordered_quantity) * CASE WHEN c.customer_tier IS NOT NULL AND c.customer_tier IN (SELECT TOP 1 customer_tier FROM dbo.customer_metadata_sample GROUP BY customer_tier ORDER BY COUNT(*) DESC) THEN 0.85 ELSE 0.70 END as simulated_quantity_demand, SUM(o.ordered_quantity * p.selling_price * 1.15) * CASE WHEN c.customer_tier IS NOT NULL AND c.customer_tier IN (SELECT TOP 1 customer_tier FROM dbo.customer_metadata_sample GROUP BY customer_tier ORDER BY COUNT(*) DESC) THEN 0.85 ELSE 0.70 END as simulated_revenue_after_elasticity FROM dbo.orders_metadata_sample o JOIN dbo.product_metadata_sample p ON o.product_id = p.product_id JOIN dbo.customer_metadata_sample c ON o.customer_id = c.customer_id WHERE p.selling_price > (SELECT AVG(selling_price) FROM dbo.product_metadata_sample WHERE selling_price IS NOT NULL) GROUP BY c.customer_tier, c.industry, p.product_name, p.category, p.sub_category, p.selling_price ORDER BY current_total_value DESC;",AI Researcher
43,"Generate feature vectors for inventory optimization models including product characteristics, demand patterns, supplier reliability, and seasonal factors.","WITH demand_patterns AS (SELECT product_id, AVG(ordered_quantity) as avg_demand, STDEV(ordered_quantity) as demand_volatility, COUNT(*) as order_frequency, MIN(order_date) as first_order_date, MAX(order_date) as last_order_date FROM dbo.orders_metadata_sample WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY product_id), supplier_reliability AS (SELECT product_id, COUNT(DISTINCT supplier_id) as supplier_count, AVG(CAST(is_on_time AS FLOAT)) as avg_supplier_reliability, AVG(CAST(is_in_full AS FLOAT)) as avg_fill_rate FROM dbo.orders_metadata_sample GROUP BY product_id), seasonal_analysis AS (SELECT product_id, AVG(CASE WHEN MONTH(order_date) IN (12,1,2) THEN ordered_quantity END) as winter_avg_demand, AVG(CASE WHEN MONTH(order_date) IN (6,7,8) THEN ordered_quantity END) as summer_avg_demand, AVG(CASE WHEN MONTH(order_date) IN (3,4,5) THEN ordered_quantity END) as spring_avg_demand, AVG(CASE WHEN MONTH(order_date) IN (9,10,11) THEN ordered_quantity END) as autumn_avg_demand FROM dbo.orders_metadata_sample WHERE order_date IS NOT NULL GROUP BY product_id) SELECT p.product_id, p.category, p.criticality_level, p.weight_kg, p.volume_m3, p.standard_cost, p.selling_price, (p.selling_price - p.standard_cost) / p.selling_price as profit_margin, p.lead_time_days, p.minimum_stock_level, SUM(i.current_stock) as total_current_stock, AVG(i.reorder_point) as avg_reorder_point, dp.avg_demand, dp.demand_volatility, dp.order_frequency, DATEDIFF(day, dp.last_order_date, GETDATE()) as days_since_last_order, sr.supplier_count, sr.avg_supplier_reliability, sr.avg_fill_rate, sa.winter_avg_demand, sa.summer_avg_demand, sa.spring_avg_demand, sa.autumn_avg_demand, CASE WHEN sa.winter_avg_demand > 0 AND sa.summer_avg_demand > 0 AND sa.spring_avg_demand > 0 AND sa.autumn_avg_demand > 0 THEN GREATEST(sa.winter_avg_demand, sa.summer_avg_demand, sa.spring_avg_demand, sa.autumn_avg_demand) / LEAST(sa.winter_avg_demand, sa.summer_avg_demand, sa.spring_avg_demand, sa.autumn_avg_demand) ELSE 1 END as seasonality_ratio, CASE WHEN dp.avg_demand > 0 THEN SUM(i.current_stock) / dp.avg_demand ELSE NULL END as days_of_supply, CASE WHEN SUM(i.current_stock) <= p.minimum_stock_level THEN 1 ELSE 0 END as below_minimum_flag FROM dbo.product_metadata_sample p LEFT JOIN dbo.inventory_metadata_sample i ON p.product_id = i.product_id LEFT JOIN demand_patterns dp ON p.product_id = dp.product_id LEFT JOIN supplier_reliability sr ON p.product_id = sr.product_id LEFT JOIN seasonal_analysis sa ON p.product_id = sa.product_id GROUP BY p.product_id, p.category, p.criticality_level, p.weight_kg, p.volume_m3, p.standard_cost, p.selling_price, p.lead_time_days, p.minimum_stock_level, dp.avg_demand, dp.demand_volatility, dp.order_frequency, dp.last_order_date, sr.supplier_count, sr.avg_supplier_reliability, sr.avg_fill_rate, sa.winter_avg_demand, sa.summer_avg_demand, sa.spring_avg_demand, sa.autumn_avg_demand ORDER BY p.product_id;",AI Researcher
44,Create a what-if scenario analysis showing the impact of consolidating suppliers: compare current multi-supplier setup versus hypothetical single-supplier scenarios for each product.,"WITH current_supplier_distribution AS (SELECT p.product_id, p.product_name, p.category, COUNT(DISTINCT o.supplier_id) as current_supplier_count, SUM(o.ordered_quantity) as total_demand, SUM(o.ordered_quantity * s.risk_score) / SUM(o.ordered_quantity) as weighted_avg_risk_score, AVG(s.avg_otif_qtr_current) as avg_supplier_otif, AVG(p.standard_cost) as avg_cost_per_unit FROM dbo.product_metadata_sample p JOIN dbo.orders_metadata_sample o ON p.product_id = o.product_id JOIN dbo.supplier_metadata_sample s ON o.supplier_id = s.supplier_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) GROUP BY p.product_id, p.product_name, p.category), best_supplier_scenario AS (SELECT product_id, supplier_id as best_supplier_id, supplier_name as best_supplier_name, supplier_otif, risk_score as best_supplier_risk, tier as best_supplier_tier, total_quantity_with_supplier, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY supplier_otif DESC, risk_score ASC) as supplier_rank FROM (SELECT o.product_id, s.supplier_id, s.supplier_name, s.avg_otif_qtr_current as supplier_otif, s.risk_score, s.tier, SUM(o.ordered_quantity) as total_quantity_with_supplier FROM dbo.orders_metadata_sample o JOIN dbo.supplier_metadata_sample s ON o.supplier_id = s.supplier_id WHERE o.order_date >= DATEADD(year, -1, GETDATE()) AND s.is_active = 1 GROUP BY o.product_id, s.supplier_id, s.supplier_name, s.avg_otif_qtr_current, s.risk_score, s.tier) supplier_performance) SELECT csd.product_id, csd.product_name, csd.category, csd.current_supplier_count, csd.total_demand, csd.weighted_avg_risk_score as current_risk_score, csd.avg_supplier_otif as current_avg_otif, csd.avg_cost_per_unit, bss.best_supplier_name, bss.best_supplier_tier, bss.supplier_otif as single_supplier_otif, bss.best_supplier_risk as single_supplier_risk, (bss.supplier_otif - csd.avg_supplier_otif) as otif_impact, (bss.best_supplier_risk - csd.weighted_avg_risk_score) as risk_impact, csd.avg_cost_per_unit * 0.95 as projected_unit_cost_with_consolidation, (csd.avg_cost_per_unit - csd.avg_cost_per_unit * 0.95) * csd.total_demand as potential_annual_savings, CASE WHEN csd.current_supplier_count = 1 THEN 'ALREADY SINGLE SUPPLIER' WHEN bss.supplier_otif > csd.avg_supplier_otif AND bss.best_supplier_risk <= csd.weighted_avg_risk_score THEN 'CONSOLIDATION BENEFICIAL' WHEN bss.supplier_otif > csd.avg_supplier_otif AND bss.best_supplier_risk > csd.weighted_avg_risk_score THEN 'MIXED IMPACT' ELSE 'CONSOLIDATION NOT RECOMMENDED' END as consolidation_recommendation FROM current_supplier_distribution csd JOIN best_supplier_scenario bss ON csd.product_id = bss.product_id WHERE bss.supplier_rank = 1 ORDER BY potential_annual_savings DESC;",AI Researcher
45,"Extract training data for a machine learning model to predict optimal reorder points based on demand variability, supplier lead times, and service level requirements.","WITH demand_statistics AS (SELECT product_id, COUNT(*) as historical_orders, AVG(ordered_quantity) as avg_demand, STDEV(ordered_quantity) as demand_std_dev, MIN(ordered_quantity) as min_demand, MAX(ordered_quantity) as max_demand, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ordered_quantity) OVER (PARTITION BY product_id) as median_demand, PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY ordered_quantity) OVER (PARTITION BY product_id) as demand_95th_percentile FROM dbo.orders_metadata_sample WHERE order_date >= DATEADD(year, -1, GETDATE()) GROUP BY product_id), supplier_performance AS (SELECT product_id, AVG(DATEDIFF(day, order_date, actual_delivery_date)) as avg_actual_lead_time, STDEV(DATEDIFF(day, order_date, actual_delivery_date)) as lead_time_variability, AVG(CAST(is_on_time AS FLOAT)) as supplier_reliability, COUNT(DISTINCT supplier_id) as supplier_count FROM dbo.orders_metadata_sample WHERE actual_delivery_date IS NOT NULL GROUP BY product_id), stockout_analysis AS (SELECT product_id, SUM(CASE WHEN current_stock = 0 THEN 1 ELSE 0 END) as stockout_instances, COUNT(*) as inventory_records, AVG(current_stock) as avg_inventory_level FROM dbo.inventory_metadata_sample GROUP BY product_id) SELECT p.product_id, p.category, p.criticality_level, p.lead_time_days as standard_lead_time, p.minimum_stock_level as current_reorder_point, ds.avg_demand, ds.demand_std_dev, CASE WHEN ds.avg_demand > 0 THEN ds.demand_std_dev / ds.avg_demand ELSE 0 END as coefficient_of_variation, ds.demand_95th_percentile, sp.avg_actual_lead_time, sp.lead_time_variability, sp.supplier_reliability, sp.supplier_count, COALESCE(sa.stockout_instances, 0) as historical_stockouts, sa.avg_inventory_level, CASE WHEN p.criticality_level IS NOT NULL THEN ROW_NUMBER() OVER (PARTITION BY p.criticality_level ORDER BY p.criticality_level DESC) ELSE 1 END as criticality_rank, ds.avg_demand * COALESCE(sp.avg_actual_lead_time, p.lead_time_days) as lead_time_demand, CASE WHEN ds.demand_std_dev > 0 AND sp.avg_actual_lead_time > 0 THEN 2.0 * ds.demand_std_dev * SQRT(COALESCE(sp.avg_actual_lead_time, p.lead_time_days)) ELSE 0 END as safety_stock_calculation, (ds.avg_demand * COALESCE(sp.avg_actual_lead_time, p.lead_time_days)) + (2.0 * ds.demand_std_dev * SQRT(COALESCE(sp.avg_actual_lead_time, p.lead_time_days))) as calculated_optimal_reorder_point, CASE WHEN COALESCE(sa.stockout_instances, 0) = 0 AND sa.avg_inventory_level <= p.minimum_stock_level * 1.2 THEN 'OPTIMAL' WHEN COALESCE(sa.stockout_instances, 0) = 0 THEN 'OVERSTOCKED' ELSE 'UNDERSTOCKED' END as current_performance_label FROM dbo.product_metadata_sample p LEFT JOIN demand_statistics ds ON p.product_id = ds.product_id LEFT JOIN supplier_performance sp ON p.product_id = sp.product_id LEFT JOIN stockout_analysis sa ON p.product_id = sa.product_id WHERE ds.historical_orders >= 5 ORDER BY p.product_id;",AI Researcher
